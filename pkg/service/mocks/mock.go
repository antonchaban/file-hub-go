// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	reflect "reflect"

	fhub "github.com/antonchaban/file-hub-go"
	gomock "github.com/golang/mock/gomock"
)

// MockAuthorization is a mock of Authorization interface.
type MockAuthorization struct {
	ctrl     *gomock.Controller
	recorder *MockAuthorizationMockRecorder
}

// MockAuthorizationMockRecorder is the mock recorder for MockAuthorization.
type MockAuthorizationMockRecorder struct {
	mock *MockAuthorization
}

// NewMockAuthorization creates a new mock instance.
func NewMockAuthorization(ctrl *gomock.Controller) *MockAuthorization {
	mock := &MockAuthorization{ctrl: ctrl}
	mock.recorder = &MockAuthorizationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthorization) EXPECT() *MockAuthorizationMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockAuthorization) CreateUser(user fhub.User) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", user)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockAuthorizationMockRecorder) CreateUser(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockAuthorization)(nil).CreateUser), user)
}

// GenerateToken mocks base method.
func (m *MockAuthorization) GenerateToken(username, password string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateToken", username, password)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateToken indicates an expected call of GenerateToken.
func (mr *MockAuthorizationMockRecorder) GenerateToken(username, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateToken", reflect.TypeOf((*MockAuthorization)(nil).GenerateToken), username, password)
}

// InvalidateToken mocks base method.
func (m *MockAuthorization) InvalidateToken(accessToken string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InvalidateToken", accessToken)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InvalidateToken indicates an expected call of InvalidateToken.
func (mr *MockAuthorizationMockRecorder) InvalidateToken(accessToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InvalidateToken", reflect.TypeOf((*MockAuthorization)(nil).InvalidateToken), accessToken)
}

// ParseToken mocks base method.
func (m *MockAuthorization) ParseToken(token string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseToken", token)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseToken indicates an expected call of ParseToken.
func (mr *MockAuthorizationMockRecorder) ParseToken(token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseToken", reflect.TypeOf((*MockAuthorization)(nil).ParseToken), token)
}

// MockFolder is a mock of Folder interface.
type MockFolder struct {
	ctrl     *gomock.Controller
	recorder *MockFolderMockRecorder
}

// MockFolderMockRecorder is the mock recorder for MockFolder.
type MockFolderMockRecorder struct {
	mock *MockFolder
}

// NewMockFolder creates a new mock instance.
func NewMockFolder(ctrl *gomock.Controller) *MockFolder {
	mock := &MockFolder{ctrl: ctrl}
	mock.recorder = &MockFolderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFolder) EXPECT() *MockFolderMockRecorder {
	return m.recorder
}

// CreateFolder mocks base method.
func (m *MockFolder) CreateFolder(userId int, folder fhub.Folder) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFolder", userId, folder)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFolder indicates an expected call of CreateFolder.
func (mr *MockFolderMockRecorder) CreateFolder(userId, folder interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFolder", reflect.TypeOf((*MockFolder)(nil).CreateFolder), userId, folder)
}

// DeleteFolder mocks base method.
func (m *MockFolder) DeleteFolder(userId, folderId int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFolder", userId, folderId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteFolder indicates an expected call of DeleteFolder.
func (mr *MockFolderMockRecorder) DeleteFolder(userId, folderId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFolder", reflect.TypeOf((*MockFolder)(nil).DeleteFolder), userId, folderId)
}

// GetAllFolders mocks base method.
func (m *MockFolder) GetAllFolders(userId int) ([]fhub.Folder, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllFolders", userId)
	ret0, _ := ret[0].([]fhub.Folder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllFolders indicates an expected call of GetAllFolders.
func (mr *MockFolderMockRecorder) GetAllFolders(userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllFolders", reflect.TypeOf((*MockFolder)(nil).GetAllFolders), userId)
}

// GetById mocks base method.
func (m *MockFolder) GetById(userId, folderId int) (fhub.Folder, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", userId, folderId)
	ret0, _ := ret[0].(fhub.Folder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById.
func (mr *MockFolderMockRecorder) GetById(userId, folderId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockFolder)(nil).GetById), userId, folderId)
}

// UpdateFolder mocks base method.
func (m *MockFolder) UpdateFolder(userId, folderId int, input fhub.UpdateFolderInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFolder", userId, folderId, input)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateFolder indicates an expected call of UpdateFolder.
func (mr *MockFolderMockRecorder) UpdateFolder(userId, folderId, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFolder", reflect.TypeOf((*MockFolder)(nil).UpdateFolder), userId, folderId, input)
}

// MockFile is a mock of File interface.
type MockFile struct {
	ctrl     *gomock.Controller
	recorder *MockFileMockRecorder
}

// MockFileMockRecorder is the mock recorder for MockFile.
type MockFileMockRecorder struct {
	mock *MockFile
}

// NewMockFile creates a new mock instance.
func NewMockFile(ctrl *gomock.Controller) *MockFile {
	mock := &MockFile{ctrl: ctrl}
	mock.recorder = &MockFileMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFile) EXPECT() *MockFileMockRecorder {
	return m.recorder
}

// CreateFile mocks base method.
func (m *MockFile) CreateFile(userId, folderId int, file fhub.File) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFile", userId, folderId, file)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFile indicates an expected call of CreateFile.
func (mr *MockFileMockRecorder) CreateFile(userId, folderId, file interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFile", reflect.TypeOf((*MockFile)(nil).CreateFile), userId, folderId, file)
}

// DeleteFile mocks base method.
func (m *MockFile) DeleteFile(userId, fileId int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFile", userId, fileId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteFile indicates an expected call of DeleteFile.
func (mr *MockFileMockRecorder) DeleteFile(userId, fileId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFile", reflect.TypeOf((*MockFile)(nil).DeleteFile), userId, fileId)
}

// GetAllFiles mocks base method.
func (m *MockFile) GetAllFiles(userId, folderId int) ([]fhub.File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllFiles", userId, folderId)
	ret0, _ := ret[0].([]fhub.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllFiles indicates an expected call of GetAllFiles.
func (mr *MockFileMockRecorder) GetAllFiles(userId, folderId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllFiles", reflect.TypeOf((*MockFile)(nil).GetAllFiles), userId, folderId)
}

// GetFileById mocks base method.
func (m *MockFile) GetFileById(userId, fileId int) (fhub.File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFileById", userId, fileId)
	ret0, _ := ret[0].(fhub.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFileById indicates an expected call of GetFileById.
func (mr *MockFileMockRecorder) GetFileById(userId, fileId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFileById", reflect.TypeOf((*MockFile)(nil).GetFileById), userId, fileId)
}

// UpdateFile mocks base method.
func (m *MockFile) UpdateFile(userId, fileId int, input fhub.UpdateFileInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFile", userId, fileId, input)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateFile indicates an expected call of UpdateFile.
func (mr *MockFileMockRecorder) UpdateFile(userId, fileId, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFile", reflect.TypeOf((*MockFile)(nil).UpdateFile), userId, fileId, input)
}
